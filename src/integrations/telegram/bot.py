"""Telegram Bot integration v·ªõi clean architecture"""

import logging
from typing import Dict, Any, Optional
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from datetime import datetime

from ...services.document_service import DocumentService
from ...services.task_service import TaskService
from ...core.types import SourceType, TelegramMessageData, ProcessingResult
from ...core.exceptions import IntegrationException
from ...config import settings
from ...llm_client import LLMClient

logger = logging.getLogger(__name__)

class TelegramBot:
    """
    Telegram Bot v·ªõi clean architecture
    Single Responsibility: Handle telegram integration only
    """
    
    def __init__(self, token: str):
        self.token = token
        self.application = None
        self.document_service = DocumentService()
        self.task_service = TaskService()
        self.llm_client = LLMClient()
        
    async def initialize(self):
        """Initialize bot application"""
        try:
            self.application = Application.builder().token(self.token).build()
            
            # Register handlers
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("add", self.add_command))
            self.application.add_handler(CommandHandler("tasks", self.tasks_command))
            self.application.add_handler(CommandHandler("ask", self.ask_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("done", self.mark_done_command))
            self.application.add_handler(CommandHandler("progress", self.mark_progress_command))
            self.application.add_handler(CommandHandler("block", self.mark_blocked_command))
            
            # Handle text messages (auto-extract tasks)
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message)
            )
            
            # Handle callback queries for inline buttons
            from telegram.ext import CallbackQueryHandler
            self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
            
            logger.info("Telegram bot initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize telegram bot: {e}")
            raise IntegrationException(f"Bot initialization failed: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        welcome_message = """
ü§ñ **AI Work OS Bot**

Ch√†o m·ª´ng! Bot n√†y gi√∫p b·∫°n qu·∫£n l√Ω c√¥ng vi·ªác th√¥ng minh.

**L·ªánh c√≥ s·∫µn:**
‚Ä¢ `/add <text>` - T·∫°o tasks t·ª´ vƒÉn b·∫£n
‚Ä¢ `/tasks` - Xem danh s√°ch tasks (c√≥ s·ªë th·ª© t·ª±)
‚Ä¢ `/done <s·ªë>` - Ho√†n th√†nh task
‚Ä¢ `/ask <question>` - H·ªèi ƒë√°p v·ªÅ documents
‚Ä¢ `/status` - T·ªïng quan h·ªá th·ªëng
‚Ä¢ `/help` - H∆∞·ªõng d·∫´n chi ti·∫øt

**Ho·∫∑c ƒë∆°n gi·∫£n:**
G·ª≠i tin nh·∫Øn b·∫•t k·ª≥ ƒë·ªÉ t·ª± ƒë·ªông t·∫°o tasks!

V√≠ d·ª•: "Meeting ng√†y mai 2pm, c·∫ßn chu·∫©n b·ªã slides v√† g·ª≠i agenda cho team"
        """
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
        
        # Log user interaction
        logger.info(
            "New user started bot",
            extra={
                "user_id": update.effective_user.id,
                "username": update.effective_user.username
            }
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_message = """
üìñ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng AI Work OS Bot**

**1. T·ª± ƒë·ªông t·∫°o tasks:**
Ch·ªâ c·∫ßn g·ª≠i tin nh·∫Øn b·∫•t k·ª≥, bot s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch v√† t·∫°o tasks.

*V√≠ d·ª•:*
"Cu·ªôc h·ªçp v·ªõi client v√†o th·ª© 5 l√∫c 2pm. C·∫ßn prepare presentation v√† review contract tr∆∞·ªõc ƒë√≥."

**2. L·ªánh c·ª• th·ªÉ:**

‚Ä¢ `/add <vƒÉn b·∫£n>` 
  T·∫°o tasks t·ª´ vƒÉn b·∫£n c·ª• th·ªÉ
  
‚Ä¢ `/tasks [status]`
  Xem tasks (all/new/progress/done/blocked)
  
‚Ä¢ `/ask <c√¢u h·ªèi>`
  H·ªèi ƒë√°p v·ªÅ documents ƒë√£ l∆∞u
  
‚Ä¢ `/status`
  Xem t·ªïng quan tasks v√† h·ªá th·ªëng
  
‚Ä¢ `/done <s·ªë>` - ƒê√°nh d·∫•u task ho√†n th√†nh
‚Ä¢ `/progress <s·ªë>` - ƒê√°nh d·∫•u task ƒëang l√†m  
‚Ä¢ `/block <s·ªë>` - ƒê√°nh d·∫•u task b·ªã block

**3. T√≠nh nƒÉng th√¥ng minh:**
‚úÖ T·ª± ƒë·ªông nh·∫≠n di·ªán ng∆∞·ªùi l√†m
‚úÖ T·ª± ƒë·ªông detect deadline  
‚úÖ Ph√¢n lo·∫°i priority
‚úÖ Support ti·∫øng Vi·ªát ho√†n to√†n

**Tips:**
- Vi·∫øt r√µ r√†ng ƒë·ªÉ bot hi·ªÉu ch√≠nh x√°c
- Mention t√™n ng∆∞·ªùi v√† th·ªùi gian ƒë·ªÉ t·ª± ƒë·ªông assign
- Bot l∆∞u t·∫•t c·∫£ ƒë·ªÉ search sau n√†y
        """
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /add command"""
        if not context.args:
            await update.message.reply_text("‚ùå C·∫ßn cung c·∫•p vƒÉn b·∫£n ƒë·ªÉ t·∫°o tasks.\n\nV√≠ d·ª•: `/add Meeting ng√†y mai, c·∫ßn chu·∫©n b·ªã slides`")
            return
        
        text = " ".join(context.args)
        await self._process_user_text(update, text)
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /tasks command"""
        try:
            # Parse status filter n·∫øu c√≥
            status_filter = None
            if context.args:
                status_arg = context.args[0].lower()
                status_mapping = {
                    "new": "new",
                    "progress": "in_progress", 
                    "blocked": "blocked",
                    "done": "done"
                }
                status_filter = status_mapping.get(status_arg)
            
            # Get tasks cho user n√†y
            user_id = str(update.effective_user.id)
            tasks = await self.task_service.get_tasks(
                source_type_filter=SourceType.TELEGRAM.value,
                limit=20
            )
            
            # Filter tasks t·ª´ user n√†y (check source_id trong document)
            user_tasks = []
            for task in tasks:
                # C·∫ßn check document ƒë·ªÉ verify source_id
                doc = await self.document_service.get_document_by_id(int(task["source_doc_id"]))
                if doc and doc.source_id == user_id:
                    user_tasks.append(task)
            
            if not user_tasks:
                await update.message.reply_text("üìù Ch∆∞a c√≥ tasks n√†o. G·ª≠i tin nh·∫Øn ƒë·ªÉ t·∫°o tasks t·ª± ƒë·ªông!")
                return
            
            # Format message
            message = f"üìã **Tasks c·ªßa b·∫°n** ({len(user_tasks)} tasks)\n\n"
            
            status_emoji = {
                "new": "üÜï",
                "in_progress": "‚è≥", 
                "blocked": "üö´",
                "done": "‚úÖ"
            }
            
            for i, task in enumerate(user_tasks[:10], 1):  # Show max 10 with numbers
                emoji = status_emoji.get(task["status"], "üìå")
                owner = f"üë§ {task['owner']}" if task["owner"] else ""
                due = f"üìÖ {task['due_date']}" if task["due_date"] else ""
                
                message += f"{i}. {emoji} **{task['title']}**\n"
                if owner or due:
                    message += f"   {owner} {due}\n"
                message += "\n"
            
            if len(user_tasks) > 10:
                message += f"... v√† {len(user_tasks) - 10} tasks kh√°c"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Tasks command failed: {e}")
            await update.message.reply_text("‚ùå L·ªói khi l·∫•y danh s√°ch tasks. Vui l√≤ng th·ª≠ l·∫°i.")
    
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /ask command"""
        if not context.args:
            await update.message.reply_text("‚ùì C·∫ßn ƒë·∫∑t c√¢u h·ªèi.\n\nV√≠ d·ª•: `/ask Database schema th·∫ø n√†o r·ªìi?`")
            return
        
        question = " ".join(context.args)
        
        try:
            await update.message.reply_text("üîç ƒêang t√¨m ki·∫øm th√¥ng tin...")
            
            # Search documents
            user_id = str(update.effective_user.id)
            relevant_docs = await self.document_service.search_documents_by_similarity(
                question,
                top_k=6,
                source_type_filter=SourceType.TELEGRAM
            )
            
            # Filter docs from this user
            user_docs = []
            for doc in relevant_docs:
                if doc.get("source_id") == user_id:
                    user_docs.append(doc)
            
            if not user_docs:
                await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong d·ªØ li·ªáu c·ªßa b·∫°n.")
                return
            
            # Create context
            context_text = "\n\n".join([doc["text"][:500] for doc in user_docs[:3]])
            
            # Get answer from LLM
            result = await self.llm_client.answer_question(question, context_text)
            
            # Format response
            message = f"üí° **C√¢u tr·∫£ l·ªùi:**\n{result['answer']}\n\n"
            
            if result.get('suggested_next_steps'):
                message += "**G·ª£i √Ω ti·∫øp theo:**\n"
                for step in result['suggested_next_steps']:
                    message += f"‚Ä¢ {step}\n"
            
            message += f"\nüìä *T√¨m th·∫•y t·ª´ {len(user_docs)} documents*"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Ask command failed: {e}")
            await update.message.reply_text("‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command"""
        try:
            # Get user's task counts
            user_id = str(update.effective_user.id)
            user_tasks = await self._get_user_tasks(user_id)
            
            # Count by status
            counts = {"new": 0, "in_progress": 0, "blocked": 0, "done": 0}
            for task in user_tasks:
                status = task["status"]
                if status in counts:
                    counts[status] += 1
            
            # Format message
            total = sum(counts.values())
            message = f"üìä **T·ªïng quan Tasks c·ªßa b·∫°n**\n\n"
            message += f"üìà T·ªïng c·ªông: **{total}** tasks\n\n"
            message += f"üÜï M·ªõi: **{counts['new']}**\n"
            message += f"‚è≥ ƒêang l√†m: **{counts['in_progress']}**\n"
            message += f"üö´ B·ªã block: **{counts['blocked']}**\n"
            message += f"‚úÖ Ho√†n th√†nh: **{counts['done']}**\n\n"
            
            # Active tasks percentage
            active = counts['new'] + counts['in_progress']
            if total > 0:
                active_pct = round(active / total * 100)
                message += f"üî• ƒêang active: **{active_pct}%**"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Status command failed: {e}")
            await update.message.reply_text("‚ùå L·ªói khi l·∫•y th·ªëng k√™. Vui l√≤ng th·ª≠ l·∫°i.")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle regular text messages - auto extract tasks"""
        text = update.message.text
        
        # Skip if message too short
        if len(text.strip()) < 10:
            await update.message.reply_text("üìù Tin nh·∫Øn h∆°i ng·∫Øn. G·ª≠i th√™m chi ti·∫øt ƒë·ªÉ t·∫°o tasks t·ª± ƒë·ªông!")
            return
        
        await self._process_user_text(update, text)
    
    async def mark_done_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /done command to mark task as completed"""
        await self._update_task_status(update, context, "done", "‚úÖ ƒê√£ ƒë√°nh d·∫•u task ho√†n th√†nh!")
    
    async def mark_progress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /progress command to mark task as in progress"""
        await self._update_task_status(update, context, "in_progress", "‚è≥ ƒê√£ ƒë√°nh d·∫•u task ƒëang th·ª±c hi·ªán!")
    
    async def mark_blocked_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /block command to mark task as blocked"""
        await self._update_task_status(update, context, "blocked", "üö´ ƒê√£ ƒë√°nh d·∫•u task b·ªã block!")
    
    async def _update_task_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE, status: str, success_msg: str):
        """Helper to update task status by task number"""
        if not context.args:
            await update.message.reply_text(f"‚ùå C·∫ßn cung c·∫•p s·ªë th·ª© t·ª± task.\n\nV√≠ d·ª•: `/{status.replace('_', '')} 1`")
            return
        
        try:
            task_number = int(context.args[0])
            user_id = str(update.effective_user.id)
            user_tasks = await self._get_user_tasks(user_id)
            
            if task_number < 1 or task_number > len(user_tasks):
                await update.message.reply_text(f"‚ùå Task s·ªë {task_number} kh√¥ng t·ªìn t·∫°i. D√πng `/tasks` ƒë·ªÉ xem danh s√°ch.")
                return
            
            task = user_tasks[task_number - 1]
            task_id = int(task["id"])
            
            # Update task
            await self.task_service.update_task(task_id=task_id, status=status)
            
            await update.message.reply_text(f"{success_msg}\n\nüìù **{task['title']}**")
            
        except ValueError:
            await update.message.reply_text("‚ùå S·ªë task kh√¥ng h·ª£p l·ªá.")
        except Exception as e:
            logger.error(f"Task status update failed: {e}")
            await update.message.reply_text("‚ùå L·ªói khi c·∫≠p nh·∫≠t task.")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline button callbacks"""
        query = update.callback_query
        await query.answer()
        
        try:
            # Parse callback data: action_taskid
            action, task_id = query.data.split('_', 1)
            task_id = int(task_id)
            
            if action == "done":
                await self.task_service.update_task(task_id=task_id, status="done")
                await query.edit_message_text("‚úÖ Task ƒë√£ ho√†n th√†nh!")
            elif action == "progress":
                await self.task_service.update_task(task_id=task_id, status="in_progress")
                await query.edit_message_text("‚è≥ Task ƒëang th·ª±c hi·ªán!")
            elif action == "block":
                await self.task_service.update_task(task_id=task_id, status="blocked")
                await query.edit_message_text("üö´ Task b·ªã block!")
                
        except Exception as e:
            logger.error(f"Callback query failed: {e}")
            await query.edit_message_text("‚ùå L·ªói khi c·∫≠p nh·∫≠t task.")
    
    async def _process_user_text(self, update: Update, text: str):
        """
        Process user text v√† t·∫°o tasks
        DRY: Reusable text processing logic
        """
        try:
            await update.message.reply_text("‚ö° ƒêang ph√¢n t√≠ch v√† t·∫°o tasks...")
            
            # Create message data
            user_id = str(update.effective_user.id)
            message_data = TelegramMessageData(
                text=text,
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id,
                user_id=update.effective_user.id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name
            )
            
            # Process document
            result = await self.document_service.process_document(
                text=text,
                source="chat",
                source_type=SourceType.TELEGRAM,
                source_id=user_id,
                metadata=message_data.dict()
            )
            
            if not result.success:
                await update.message.reply_text(f"‚ùå L·ªói khi x·ª≠ l√Ω: {result.error_message}")
                return
            
            # Format success message
            if result.actions_count > 0:
                message = f"‚úÖ **ƒê√£ t·∫°o {result.actions_count} tasks m·ªõi!**\n\n"
                message += f"üìù **T√≥m t·∫Øt:** {result.summary}\n\n"
                message += "D√πng `/tasks` ƒë·ªÉ xem chi ti·∫øt ho·∫∑c `/ask` ƒë·ªÉ h·ªèi th√™m!"
            else:
                message = f"üìÑ **ƒê√£ l∆∞u document**\n\n"
                message += f"üìù **T√≥m t·∫Øt:** {result.summary}\n\n"
                message += "Kh√¥ng t√¨m th·∫•y action items c·ª• th·ªÉ. D√πng `/ask` ƒë·ªÉ h·ªèi v·ªÅ n·ªôi dung n√†y!"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
            # Log successful processing
            logger.info(
                "Text message processed successfully", 
                extra={
                    "user_id": update.effective_user.id,
                    "document_id": result.document_id,
                    "actions_count": result.actions_count
                }
            )
            
        except Exception as e:
            logger.error(f"Text processing failed: {e}")
            await update.message.reply_text("‚ùå C√≥ l·ªói khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin.")
    
    async def _get_user_tasks(self, user_id: str, limit: int = 100):
        """Get all tasks for a specific user"""
        all_tasks = await self.task_service.get_tasks(
            source_type_filter=SourceType.TELEGRAM.value,
            limit=limit
        )
        
        user_tasks = []
        for task in all_tasks:
            doc = await self.document_service.get_document_by_id(int(task["source_doc_id"]))
            if doc and doc.source_id == user_id:
                user_tasks.append(task)
        
        return user_tasks
    
    async def start_polling(self):
        """Start bot polling"""
        if not self.application:
            raise IntegrationException("Bot not initialized")
        
        try:
            logger.info("Starting Telegram bot polling...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("Telegram bot is running!")
            
            # Keep running
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"Bot polling failed: {e}")
            raise IntegrationException(f"Polling failed: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """Stop bot"""
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
            logger.info("Telegram bot stopped")