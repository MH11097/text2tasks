version: '3.8'

services:
  ai-work-os:
    build: .
    ports:
      - "8000:8000"
    environment:
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - OPENAI_CHAT_MODEL=${OPENAI_CHAT_MODEL:-gpt-4o-mini}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      
      # API Security
      - API_KEY=${API_KEY}
      
      # Database Configuration
      - DB_URL=sqlite:///./data/app.db
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}
      
      # Rate Limiting
      - REDIS_URL=redis://redis:6379
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      
      # RAG Configuration
      - RAG_TOP_K=${RAG_TOP_K:-6}
      
      # CORS
      - ALLOWED_ORIGIN=${ALLOWED_ORIGIN:-http://localhost:8000}
      
      # Debug
      - DEBUG=${DEBUG:-false}
    volumes:
      - app_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-work-os-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-work-os.rule=Host(`localhost`)"
      - "traefik.http.services.ai-work-os.loadbalancer.server.port=8000"

  redis:
    image: redis:7-alpine
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-work-os-network
    labels:
      - "traefik.enable=false"

  # Optional: Traefik reverse proxy for production
  traefik:
    image: traefik:v3.0
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - ai-work-os-network
    profiles:
      - production

volumes:
  app_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-work-os-network:
    driver: bridge